{
	// Place your snippets for oracle_sql here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"output":{	"prefix": "log",
		"body": [
			"dbms_output.put_line($1);",
		],
		"description": "Log output to console"
	},
	"Create Table": {
        "prefix": "createtable",
        "body": [
            "create table ${1:table_name} (",
            "    id number generated by default on null as identity,",
            "    ${2:column2_name} ${3:column2_datatype} ${4:constraint}",
            "    $5",
            ");",
            "$0"
        ],
        "description": "Creates a new table in Oracle SQL with placeholders for table name and columns"
    },
	"Create Package": {
        "prefix": "createpkgspec",
        "body": [
            "create or replace package ${1:package_name}",
			"is",
			"--global variables",
			"\n",
            "    function f_get_${2: function};",
			"\n",
            "    procedure p_add_${3: procedure};",
            "    end $1;"
        ],
        "description": "Creates a new package spec in Oracle SQL with placeholders for row getter name and setter"
    },
	"Create Package Body": {
        "prefix": "createpkbody",
        "body": [
            "create or replace package body ${1:package_name}",
			"is",
			"\t--global variables",
			"\n",
            "    function f_get_${2: function};",
			"\n",
            "    procedure p_add_${3: procedure};",
            "    end $1;"
        ],
		"description": "Creates a new package body in Oracle SQL with placeholders for row getter name and setter"
    },
	"Not Null Constraint": {
        "prefix": "nn",
        "body": [
            "not null"
        ],
        "description": "not null constraint"
    },
	"declare-begin-end": {
        "prefix": "decl",
        "body": [
            "declare",
			"\t$1",
			"begin",
			"\t$2",
			"end;"
        ],
        "description": "declare-begin-end block"
    },
	"func": {
        "prefix": "func",
        "body": [
            "function f_$1",
			"is",
			"\t$2",
			"begin",
			"\t$3",
			"end f_$1;"
        ],
        "description": "function in pkg"
    }
    ,
	"proc": {
        "prefix": "proc",
        "body": [
            "procedure p_$1",
			"is",
			"\t$2",
			"begin",
			"\t$3",
			"end p_$1;"
        ],
        "description": "procedure in pkg"
    }
    ,
	"apex_debug.message": {
        "prefix": "apxdb",
        "body": [
            "apex_debug.message('$1 => ' || $1);"
        ],
        "description": "procedure in pkg"
    },
	"apex_error.add_error": {
        "prefix": "apxerr",
        "body": [
            "apex_error.add_error ( p_message          => '$1'",
            "                     , p_display_location =>  c_inline_with_field_and_notif",
            ");"
        ],
        "description": "procedure in pkg"
    },
	"generated by default on null as identity": {
        "prefix": "gen",
        "body": [
            "generated by default on null as identity"
        ],
        "description": "generated by default on null as identity"
    },
	"varchar2": {
        "prefix": "vc",
        "body": [
            "varchar2($1)"
        ],
        "description": "varchar2"
    },
	"varchar2_1": {
        "prefix": "vc2",
        "body": [
            "varchar2($1)"
        ],
        "description": "varchar2"
    },
	"primary key": {
        "prefix": "pk",
        "body": [
            "alter table $1 add constraint $2 primary key(id) ;"
        ],
        "description": "primary key"
    },
	"foreign key": {
        "prefix": "fk",
        "body": [
            "alter table $1 add constraint $2 foreign key($3) references $4;"
        ],
        "description": "primary key"
    },
	"escape string": {
        "prefix": "esc",
        "body": [
            "q'[$1]'"
        ],
        "description": "escape string"
    },
    "ajaxjs": {
        "prefix": "apxajaxjs",
        "body": [
            "apex.server.process(",
            "    '$1',",
            "    {",
            "        x01: apex.item('$2').value,",
            "        x02: apex.item('$3').value,",
            "        x03: apex.item('$4').value",
            "    },",
            "    {",
            "        success: function(data) {",
            "            apex.message.showPageSuccess(`${data.message} saved`);",
            "        }",
            "    }",
            ");"
        ],
        "description": "AJAX call in APEX js side"
    },
    "ajaxsql": {
        "prefix": "apxajaxsql",
        "body": [
            "declare",
            "    $1  number          := apex_application.g_x01;",
            "    $2 number          := apex_application.g_x02;",
            "    $3 varchar2(200)   := apex_application.g_x03;",
            "begin",
            "    apex_debug.message('ln_lat  => ' || ln_lat );",
            "    apex_debug.message('ln_long => ' || ln_long);",
            "    apex_debug.message('lv_name => ' || lv_name);",
            "",
            "",
            "    apex_json.open_object;",
            "    -- Write a key-value pair to the JSON object",
            "    apex_json.write('message', 'Inserted ' || lv_name);",
            "",
            "    -- Close the JSON object",
            "    apex_json.close_object;",
            "end;"
        ],
        "description": "AJAX call in APEX sql side"
    },
    "cursor": {
        "prefix": "cur",
        "body": [
                "open    $1($2 => $3);",
                "fetch   $1 into $4;",
                "close   $1;" 
        ],
        "description": "open cursor and stuff"
    },
    "apxerrjs": {
        "prefix": "apxerrjs",
        "body": [
            "apex.message.showErrors( [",
            "    {",
            "        type:        'error',"                ,
            "        location:   [ 'page', 'inline' ],     ",
            "        pageItem:   'P1_ENAME,               ",
            "        message:    'Name is required!',      ",
            "        unsafe:     false                    ",
            "    }                                        ",
            "] );                                         "
        ],
        "description": "apex.message.showErrors"
    },
    "apxjajaxjson": {
        "prefix": "apxjajaxjson",
        "body": [
            "apex_json.open_object;",
            "apex_json.write('success',  true);",
            "apex_json.write('message',  $1);",
            "apex_json.close_object;"                                      
        ],
        "description": "apex.message.showErrors"
    }


}
